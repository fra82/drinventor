/*
 * ******************************************************************************************************
 * Dr. Inventor Text Mining Framework Java Library
 * 
 * This code has been developed by the Natural Language Processing Group of the
 * Universitat Pompeu Fabra in the context of the FP7 European Project Dr. Inventor
 * Call: FP7-ICT-2013.8.1 - Agreement No: 611383
 * 
 * Dr. Inventor Text Mining Framework Java Library is available under an open licence, GPLv3, for non-commercial applications.
 * ******************************************************************************************************
 */
package edu.upf.taln.dri.common.connector.pdfext.localappo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

import org.apache.log4j.Logger;
import org.apache.pdfbox.pdmodel.PDDocument;

public class PDFextStatic {

	private static Logger logger = Logger.getLogger(PDFextStatic.class);

	private static final Object LOCK_pdfEXTparser = new Object();
	public static final PDFEXTparser pdfEXTparser = new PDFEXTparser();

	/**
	 * Converts the .pdf file at PDFfilePath into a .html file with the same name and store the .html file in the storageFolder.
	 * The full local path of the stored HTML file is returned; if error occurs null is returned.
	 * 
	 * @param PDFfilePath
	 * @param storageFolder
	 * @return the full local path of the stored HTML file; if errors occurs null is returned.
	 */
	public static String convertPDFtoHTML(String PDFfilePath, String storageFolder) {

		// 1) Invoke PDF2HTMLex with proper arguments
		// https://github.com/coolwanglu/pdf2htmlEX/wiki/Quick-Start
		// SEPARATE FOLDERS: 
		//Process proc = Runtime.getRuntime().exec(new String[] { "pdf2htmlEX", "--embed", "cfijo", "--dest-dir", getSorageAbsFolder(strDigest), PDFfilePath });
		// ONE FILE:
		Process proc = null;
		try {
			proc = Runtime.getRuntime().exec(new String[] { "pdf2htmlEX", "--zoom", "1.3", "--dest-dir", storageFolder, PDFfilePath });

			BufferedReader in_proc = new BufferedReader(new InputStreamReader(proc.getErrorStream()));
			String line;
			logger.info("PDF2HTMLex > **********************");
			while ((line = in_proc.readLine()) != null) {
				logger.info("PDF2HTMLex > " + line);
			}
			logger.info("PDF2HTMLex > **********************");
			in_proc.close();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

		// 2) Wait until the PDF2HTMLex process ends
		try {
			int currentCycle = 0;

			logger.info("Waiting for PDF2HTMLex conversion results:");
			while(true) {
				if(proc != null && isRunning(proc)) {
					Thread.sleep(2500);
					currentCycle++;
					if(currentCycle > 100) {
						logger.info("BREAK (timeout) ");
						break;
					}
					logger.info("...");
				}
				else {
					break;
				}
			}

		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		// 3) Retrieve converted HTML file generated by the PDF2HTMLex execution and stored in the strDigest folder
		// and process it to generate and store the XML version
		File PDFfile = new File(PDFfilePath);
		File convertedHTMLfile = new File(storageFolder, PDFfile.getName().replace(".pdf", "") + ".html");
		if(convertedHTMLfile.exists() && convertedHTMLfile.isFile()) {
			return convertedHTMLfile.getAbsolutePath();
		}
		else {
			logger.info("Error converting the PDF file: " + PDFfilePath);
			return null;
		}
	}

	/**
	 * Receive as input an HTML file generated from a PDF and returns the result of the conversion to XML
	 * as an instance of the object {@link edu.upf.taln.pdfext.PDFEXTresult PDFEXTresult}.
	 * 
	 * @param HTMLcontents
	 * @return
	 */
	public static PDFEXTresult convertHTMLtoXML(String HTMLcontents) {
		// Convert HTML to XML
		try {

			PDFEXTresult parsingResult = new PDFEXTresult(HTMLcontents, "");

			// Invoke the program that parses the contents of the html and generate the XML contents

			long startWaitingForConversionTime = System.currentTimeMillis();
			long startConversionTime = 0l;
			synchronized(LOCK_pdfEXTparser) {
				startConversionTime = System.currentTimeMillis();
				pdfEXTparser.parse(parsingResult);
			}

			System.gc();

			if(parsingResult.getResXML() != null && !parsingResult.getResXML().equals("")) {
				logger.info("Converted HTML file to XML in " + (new Double(System.currentTimeMillis() - startConversionTime) / 60000d) + " seconds, " +
						"after waiting " + (new Double(startConversionTime - startWaitingForConversionTime) / 60000d) + " seconds for converter availability.");
				return parsingResult;
			}
			else {
				logger.info("Error converting HTML file to XML - conversion results null or empty");
				return null;
			}
		} catch(Exception e) {
			e.printStackTrace();
			logger.info("Exception converting HTML file to XML " + e.getMessage() + " - " + e.getClass().toString());
			return null;
		}
	}

	/**
	 * IMPORTANT: this method works only with PDF2HTMLext installed in the PC where it is executed!
	 * 
	 * Given the full local path of a PDF file and the full local path of an temporary folder where it is possible to write and delete files,
	 * this method converts the PDF file into HTML / XML and returns the conversion results.
	 * 
	 * @param PDFfullPath
	 * @param appoFolderFullPath
	 * @return
	 */
	public static PDFEXTresult convertPDF(String PDFfullPath, String appoFolderFullPath) {

		// Max page number check
		int maxNumberOfPages=50;

		PDDocument pdoc = null;
		try {
			pdoc = new PDDocument();
			pdoc = PDDocument.load(new File(PDFfullPath));
			int pageNumber = pdoc.getNumberOfPages();
			if(pageNumber > maxNumberOfPages) {
				logger.info("PDF file with " + pageNumber + ", greater than the maximum number of pages supported for conversion - not converted.");
				return null;
			}
		} catch (IOException e) {
			e.printStackTrace();
			logger.error("PDF reading exception: " + e.getMessage() + " - " + e.getClass().toString());
		}
		finally {
			if(pdoc != null) {
				try {
					pdoc.close();
				} catch (IOException e) {
					/* Do nothing */
				}
			}
		}
		
		// Convert to HTML and store
		String fullPathToHTML = PDFextStatic.convertPDFtoHTML(PDFfullPath, appoFolderFullPath);
		
		// HTML stored to new File(getSorageAbsFolder(strDigest), strDigest + ".html")

		File convertedHTMLfile = new File(fullPathToHTML);
		if(convertedHTMLfile.exists() && convertedHTMLfile.isFile()) {
			try {
				BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(convertedHTMLfile.getAbsolutePath()), "UTF-8"));

				String htmlContents = "";

				String str = "";
				while ((str = in.readLine()) != null) {
					htmlContents += str + "\n";
				}
				in.close();

				// Convert HTML to XML
				PDFEXTresult PDFEXTconversionRes = PDFextStatic.convertHTMLtoXML(htmlContents);

				if(PDFEXTconversionRes.getResXML() != null && !PDFEXTconversionRes.getResXML().equals("")) {
					logger.info("PDF correctly converted.");
					return PDFEXTconversionRes;
				}
				else {
					logger.info("Error while performing PDF conversion.");
					return null;
				}
			} catch(Exception e) {
				e.printStackTrace();
				logger.error("PDF conversion exception: " + e.getMessage() + " - " + e.getClass().toString());
				return null;
			} finally {
				// Delete appo HTML file
				logger.info("Delete appo HTML file: " + convertedHTMLfile.delete());
			}
		}
		else {
			logger.info("ERROR: IMPOSSIBLE TO ACCESS THE HTML FILE / PROBABLY IT HAS NOT BEEN GENERATED.");
			return null;
		}

	}

	/**
	 * Check if the process is running
	 * 
	 * @param process
	 * @return
	 */
	static boolean isRunning(Process process) {
		try {
			process.exitValue();
			return false;
		} catch (Exception e) {
			return true;
		}
	}
	
	
	public static void main(String[] args) {
		PDFEXTresult result = convertPDF("/home/francesco/Downloads/paper_45.pdf", "/home/francesco/Downloads");
		System.out.println(result.getResXML());
	}
}
